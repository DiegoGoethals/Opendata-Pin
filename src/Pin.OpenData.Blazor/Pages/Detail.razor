@page "/location/{name}"

@using Pin.OpenData.Blazor.Models
@using Pin.OpenData.Blazor.Services
@using Pin.OpenData.Blazor.Components

@inject ILocationService LocationService
@inject NavigationManager NavigationManager

<h3>Detail: @location.Name</h3>

<ConfirmDeleteModal @ref="deleteModal" onDelete="DeleteLocation" location="location" />

@if (location == null)
{
	<p>Loading...</p>
}
else
{
	<div class="nav-item px-3 edit-button">
		<NavLink class="nav-link" href="@link" Match="NavLinkMatch.All">
			<span class="oi oi-pencil" aria-hidden="true"></span> Update location
		</NavLink>
	</div>
    <div>
        <p><strong>Name:</strong> @location.Name</p>
        <p><strong>Street:</strong> @location.StreetName @location.HouseNumber</p>
        <p><strong>Postal Code:</strong> @location.PostalCode</p>
		@if (location.City != null)
		{
			<p><strong>City:</strong> @location.City</p>
		}
		else
		{
			<p><strong>City:</strong> Gent</p>
		}
		@if (location.Website != null)
		{
			<p><strong>Website:</strong> <a href="@location.Website" target="_blank">@location.Website</a></p>
		}
		@if (location.Email != null)
		{
			<p><strong>Email:</strong> <a href="mailto:@location.Email">@location.Email</a></p>
		}
	</div>
	<div>
		<h4>Delete location</h4>
		<button class="btn btn-danger" @onclick="ShowDeleteModel">Delete</button>
	</div>
}

@code {
	[Parameter]
	public string name { get; set; }

	ConfirmDeleteModal deleteModal;

	Location location;

	string link;

	protected override void OnInitialized()
	{
		location = LocationService.GetLocation(name);
		link = "location/update/" + location.Name;
	}

	private void ShowDeleteModel()
	{
		deleteModal.Show();
	}

	private void DeleteLocation()
	{
		LocationService.DeleteLocation(location);
		NavigationManager.NavigateTo("/");
	}
}
